
name: Example release workflow

on:
  workflow_dispatch:
    inputs:
      devBaseImage:
        description: 'base development image'
        required: true
      version:
        description: 'application version'
        required: true
        type: string

jobs:

  run-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: run-tests
        run: |
          echo "this is the test results" > test-results.txt

      - uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results.txt

  build-documentation:
    runs-on: ubuntu-latest
    needs: run-tests

    steps:
      - uses: actions/checkout@v3

      - name: build-documentation
        run: |
          echo "this is the documentation" > documentation.txt

      - uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: documentation.txt

  build-application:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: build-documentation

    steps:
      - uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - uses: actions/download-artifact@v3
        with:
          path: mlops-build/artifacts/

      - name: check artifacts available
        run: |
          echo application already built!
          ls -la
          ls -la mlops-build/artifacts/

      - name: bundle artifacts in package
        run: |
          rm -f Dockerfile_temp
          echo "FROM ${{ inputs.devBaseImage }}:dev" > Dockerfile_temp
          echo "COPY mlops-build/artifacts/ /release-documents/" >> Dockerfile_temp

      - name: build bundled image
        run: |
          docker build -t ${{ inputs.devBaseImage }}:${{ inputs.version }} -f Dockerfile_temp .

      - name: push bundled image
        run: |
          docker push ${{ inputs.devBaseImage }}:${{ inputs.version }}

      - name: finalise release
        run: |
          echo "here we should tag the commit as a release"
