version: '3.8'

services:
    nginx:
        restart: always
        build: ./nginx
        image: mlflow_nginx
        container_name: mlflow_nginx
        ports:
            - "85:85"
            - "8002:8002"
            - "8003:8003"
        networks:
            - frontend
        depends_on:
            - web

    minio:
        restart: always
        image: minio/minio:RELEASE.2022-11-08T05-27-07Z
        container_name: mlflow_s3
        expose:
            - "9000"
            - "9001"
        command: server /data --console-address ":9001"
        networks:
            - frontend
            - backend
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
            interval: 30s
            timeout: 20s
            retries: 3
        environment:
            - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
            - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
#        volumes:
#            - minio_data:/data
        volumes:
            - type: bind
              source: ~/MLOps_data/mlflow_minio2
              target: /data

    createbuckets:
        image: minio/mc
        depends_on:
            - minio
        networks:
            - backend
        entrypoint: >
            /bin/sh -c "
            /usr/bin/mc alias set myminio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
            /usr/bin/mc mb myminio/mlflow;
            /usr/bin/mc policy set public myminio/mlflow;
            exit 0;"

    db:
        image: postgres:13.1
        networks:
            - backend
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        restart: always
        expose:
            - "5432"
#        volumes:
#            - dbdata_pg:/var/lib/postgresql/data
        volumes:
            - type: bind
              source: ~/MLOps_data/mlflow_db
              target: /var/lib/postgresql/data

    web:
        restart: always
        build: ./mlflow
        image: mlflow_server
        container_name: mlflow_server
        depends_on:
            - "minio"
            - "db"
        networks:
            - frontend
            - backend
        expose:
            - "5000"
        environment:
            - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - MLFLOW_S3_IGNORE_TLS=${MLFLOW_S3_IGNORE_TLS}
            - no_proxy=minio,db
        command: >
            bash -c "
            mlflow db upgrade postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB} && 
            mlflow server --backend-store-uri postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB} --default-artifact-root s3://mlflow/ --host 0.0.0.0
            "

# use these docker volumes for testings and development - use bind mounts in production
#volumes:
#    dbdata_pg:
#    minio_data:

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge

# Useful sources:
#   https://towardsdatascience.com/deploy-mlflow-with-docker-compose-8059f16b6039
#   https://medium.com/noodle-labs-the-future-of-ai/introduction-to-mlflow-for-mlops-part-3-database-tracking-minio-artifact-storage-and-registry-9fef196aaf42
